{
  "version": 3,
  "sources": ["../modules/utils.js", "../modules/balancePredictor.js", "../app.js"],
  "sourcesContent": ["export const fmt = (n)=>`\u00A3${(n||0).toFixed(2)}`;\nexport const setText = (el,n)=>{ el.textContent = fmt(n); el.classList.toggle('danger', n<0); };\nexport const id = () => Math.random().toString(36).slice(2,9);\nexport const monthKey = (d)=>{\n  if(typeof d === 'string') return d;\n  const dt = d || new Date();\n  const m = String(dt.getMonth()+1).padStart(2,'0');\n  return `${dt.getFullYear()}-${m}`;\n};\nexport const groupBy = (arr, fn)=>arr.reduce((a,x)=>{const k=fn(x);(a[k]=a[k]||[]).push(x);return a;},{});\nexport const sum = (arr, fn=(x)=>x)=>arr.reduce((a,x)=>a+fn(x),0);\nexport const clone = (o)=>JSON.parse(JSON.stringify(o));\nexport const parseCSV = (text, map, hasHeader=true, invert=false)=>{\n  const lines = text.trim().split(/\\r?\\n/).filter(l=>l);\n  if(hasHeader) lines.shift();\n  let idx = {date:0, desc:1, category:2, amount:3};\n  if(map){\n    idx = {};\n    for(const [k,v] of Object.entries(map)){\n      idx[k] = (v==='' || v===null) ? -1 : Number(v);\n    }\n  }\n  const splitLine = (line)=>{\n    const cols = [];\n    let cur = '';\n    let inQuotes = false;\n    for(let i=0;i<line.length;i++){\n      const ch = line[i];\n      if(ch === '\"'){\n        if(inQuotes && line[i+1] === '\"'){ cur+='\"'; i++; }\n        else inQuotes = !inQuotes;\n      }else if(ch===',' && !inQuotes){\n        cols.push(cur);\n        cur='';\n      }else{\n        cur+=ch;\n      }\n    }\n    cols.push(cur);\n    return cols.map(s=>s.replace(/\"\"/g,'\"').trim());\n  };\n  return lines.map(line=>{\n    const cols = splitLine(line);\n    const dRaw = idx.date>=0 ? cols[idx.date]||'' : '';\n    const desc = idx.desc>=0 ? cols[idx.desc]||'' : '';\n    const category = idx.category>=0 ? cols[idx.category]||'' : '';\n    let aRaw = idx.amount>=0 ? cols[idx.amount]||'' : '';\n    if(idx.amount>=0 && cols.length>Math.max(idx.amount+1,4)){\n      aRaw = cols.slice(idx.amount).join('');\n    }\n    let date = '';\n    if(dRaw){\n      const [dd,mm,yyyy] = dRaw.split(/[\\/]/);\n      if(yyyy && mm && dd) date = `${yyyy}-${mm}-${dd}`;\n    }\n    let amount = Number(aRaw.replace(/[^0-9.-]/g,'')) || 0;\n    if(invert) amount = -amount;\n    return {date,desc,category,amount};\n  });\n};\nexport const toCSV = (txs)=>[\n  'Date,Description,Category,Amount',\n  ...txs.map(t=>{\n    const [y,m,d] = (t.date||'').split('-');\n    const date = d?`${d}/${m}/${y}`:'';\n    return [date,t.desc,t.category,`\u00A3${Number(t.amount||0).toFixed(2)}`].join(',');\n  })\n].join('\\n');\n", "import { sum, monthKey as toMonthKey } from './utils.js';\n\nconst parseMonthKey = (mk) => {\n  if (typeof mk !== 'string') return null;\n  const match = mk.match(/^(\\d{4})-(\\d{2})$/);\n  if (!match) return null;\n  const year = Number(match[1]);\n  const month = Number(match[2]);\n  if (!Number.isFinite(year) || !Number.isFinite(month) || month < 1 || month > 12) return null;\n  return { year, month };\n};\n\nconst dayFromDate = (date) => {\n  if (typeof date !== 'string') return null;\n  const parts = date.split('-');\n  if (parts.length !== 3) return null;\n  const day = Number(parts[2]);\n  return Number.isFinite(day) ? day : null;\n};\n\nconst daysInMonth = (year, month) => {\n  if (!Number.isFinite(year) || !Number.isFinite(month)) return 31;\n  return new Date(year, month, 0).getDate();\n};\n\nconst accumulateByDay = (transactions, monthLength) => {\n  const totals = Array(monthLength + 1).fill(0);\n  for (const tx of transactions || []) {\n    const day = dayFromDate(tx?.date);\n    if (!day || day < 1 || day > monthLength) continue;\n    const amount = Number(tx?.amount) || 0;\n    totals[day] += amount;\n  }\n  const cumulative = Array(monthLength + 1).fill(0);\n  for (let day = 1; day <= monthLength; day += 1) {\n    cumulative[day] = cumulative[day - 1] + totals[day];\n  }\n  return { totals, cumulative };\n};\n\nconst median = (values) => {\n  if (!values || values.length === 0) return 0;\n  const sorted = [...values].sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2) return sorted[mid];\n  return (sorted[mid - 1] + sorted[mid]) / 2;\n};\n\nconst computeHistoryRemainders = (months, excludeKey) => {\n  const map = new Map();\n  for (const [mk, month] of Object.entries(months || {})) {\n    if (!month || mk === excludeKey) continue;\n    const parsed = parseMonthKey(mk);\n    if (!parsed) continue;\n    const monthLength = daysInMonth(parsed.year, parsed.month);\n    const { cumulative } = accumulateByDay(month.transactions || [], monthLength);\n    const finalSpend = cumulative[monthLength] || 0;\n    for (let day = 0; day <= monthLength; day += 1) {\n      const spentSoFar = cumulative[day] || 0;\n      const remainder = finalSpend - spentSoFar;\n      if (!map.has(day)) map.set(day, []);\n      map.get(day).push(remainder);\n    }\n  }\n  return map;\n};\n\nconst pickRemainder = (map, targetDay) => {\n  if (!map || map.size === 0) return { remainder: 0, sourceDay: null, sampleSize: 0 };\n  const direct = map.get(targetDay);\n  if (direct && direct.length) {\n    return { remainder: median(direct), sourceDay: targetDay, sampleSize: direct.length };\n  }\n  for (let offset = 1; offset < 32; offset += 1) {\n    const lower = targetDay - offset;\n    if (lower >= 0) {\n      const arr = map.get(lower);\n      if (arr && arr.length) {\n        return { remainder: median(arr), sourceDay: lower, sampleSize: arr.length };\n      }\n    }\n    const higher = targetDay + offset;\n    const arr = map.get(higher);\n    if (arr && arr.length) {\n      return { remainder: median(arr), sourceDay: higher, sampleSize: arr.length };\n    }\n  }\n  const entries = [...map.entries()].sort((a, b) => a[0] - b[0]);\n  if (entries.length) {\n    const [day, arr] = entries[entries.length - 1];\n    return { remainder: median(arr), sourceDay: day, sampleSize: arr.length };\n  }\n  return { remainder: 0, sourceDay: null, sampleSize: 0 };\n};\n\nconst determineObservationDay = (monthKey, transactions, today) => {\n  const parsed = parseMonthKey(monthKey);\n  if (!parsed) return { day: 0, monthLength: 31 };\n  const monthLength = daysInMonth(parsed.year, parsed.month);\n  const todayKey = toMonthKey(today);\n  if (monthKey < todayKey) {\n    return { day: monthLength, monthLength };\n  }\n  const txDays = (transactions || [])\n    .map((tx) => dayFromDate(tx?.date))\n    .filter((day) => day && day >= 1 && day <= monthLength);\n  if (monthKey === todayKey) {\n    const todayDay = Math.min(today.getDate(), monthLength);\n    if (txDays.length) {\n      return { day: Math.max(Math.max(...txDays), todayDay), monthLength };\n    }\n    return { day: todayDay, monthLength };\n  }\n  if (txDays.length) {\n    return { day: Math.max(...txDays), monthLength };\n  }\n  return { day: 0, monthLength };\n};\n\nexport const predictBalance = (monthKey, months, today = new Date()) => {\n  if (!months || !monthKey) return null;\n  const month = months[monthKey];\n  if (!month) return null;\n  const { day: observationDay, monthLength } = determineObservationDay(\n    monthKey,\n    month.transactions || [],\n    today,\n  );\n  const { cumulative } = accumulateByDay(month.transactions || [], monthLength);\n  const spentSoFar = cumulative[Math.min(observationDay, monthLength)] || 0;\n  const incomesTotal = sum(month.incomes || [], (inc) => Number(inc?.amount) || 0);\n  const remainders = computeHistoryRemainders(months, monthKey);\n  const { remainder, sourceDay, sampleSize } = pickRemainder(remainders, observationDay);\n  const predictedSpend = Math.max(0, spentSoFar + remainder);\n  const predictedLeftover = incomesTotal - predictedSpend;\n  return {\n    predictedSpend,\n    predictedLeftover,\n    spentSoFar,\n    incomesTotal,\n    observationDay,\n    remainderUsedDay: sourceDay,\n    sampleSize,\n  };\n};\n\nexport const __private = {\n  parseMonthKey,\n  dayFromDate,\n  daysInMonth,\n  accumulateByDay,\n  computeHistoryRemainders,\n  pickRemainder,\n  determineObservationDay,\n  median,\n};\n", "import { predictBalance as predictMonthBalance } from './modules/balancePredictor.js';\n\n  // ===== Utils\n  const Utils = (()=>{\n    console.log('Home Budgeting Utils module loaded'); // (important-comment)\n    const fmt = (n)=>`\u00A3${(n||0).toFixed(2)}`;\n    const setText = (el,n)=>{ el.textContent = fmt(n); el.classList.toggle('danger', n<0); };\n    const id = () => Math.random().toString(36).slice(2,9);\n    const monthKey = (d)=>{\n      if(typeof d === 'string') return d; // already key\n      const dt = d || new Date();\n      const m = String(dt.getMonth()+1).padStart(2,'0');\n      return `${dt.getFullYear()}-${m}`;\n    };\n    const groupBy = (arr, fn)=>arr.reduce((a,x)=>{const k=fn(x);(a[k]=a[k]||[]).push(x);return a;},{});\n    const sum = (arr, fn=(x)=>x)=>arr.reduce((a,x)=>a+fn(x),0);\n    const clone = (o)=>JSON.parse(JSON.stringify(o));\n    const parseCSV = (text, map, hasHeader=true, invert=false)=>{\n      const lines = text.trim().split(/\\r?\\n/).filter(l=>l);\n      if(hasHeader) lines.shift();\n      let idx = {date:0, desc:1, category:2, amount:3};\n      if(map){\n        idx = {};\n        for(const [k,v] of Object.entries(map)){\n          idx[k] = (v==='' || v===null) ? -1 : Number(v);\n        }\n      }\n      const splitLine = (line)=>{\n        const cols = [];\n        let cur = '';\n        let inQuotes = false;\n        for(let i=0;i<line.length;i++){\n          const ch = line[i];\n          if(ch === '\"'){\n            if(inQuotes && line[i+1] === '\"'){ cur+='\"'; i++; }\n            else inQuotes = !inQuotes;\n          }else if(ch===',' && !inQuotes){\n            cols.push(cur.trim());\n            cur='';\n          }else{\n            cur+=ch;\n          }\n        }\n        cols.push(cur.trim());\n        return cols.map(s=>s.replace(/^\"|\"$/g,'').replace(/\"\"/g,'\"'));\n      };\n      return lines.map(line=>{\n        const cols = splitLine(line);\n        const dRaw = idx.date>=0 ? cols[idx.date]||'' : '';\n        const desc = idx.desc>=0 ? cols[idx.desc]||'' : '';\n        const category = idx.category>=0 ? cols[idx.category]||'' : '';\n        let aRaw = idx.amount>=0 ? cols[idx.amount]||'' : '';\n        if(idx.amount>=0 && cols.length>Math.max(idx.amount+1,4)){\n          aRaw = cols.slice(idx.amount).join('');\n        }\n        let date = '';\n        if(dRaw){\n          const [dd,mm,yyyy] = dRaw.split(/[\\/]/);\n          if(yyyy && mm && dd) date = `${yyyy}-${mm}-${dd}`;\n        }\n        let amount = Number(aRaw.replace(/[^0-9.-]/g,'')) || 0;\n        if(invert) amount = -amount;\n        return {date,desc,category,amount};\n      });\n    };\n    const toCSV = (txs)=>[\n      'Date,Description,Category,Amount',\n      ...txs.map(t=>{\n        const [y,m,d] = (t.date||'').split('-');\n        const date = d?`${d}/${m}/${y}`:'';\n        return [date,t.desc,t.category,`\u00A3${Number(t.amount||0).toFixed(2)}`].join(',');\n      })\n    ].join('\\n');\n    return {fmt,id,monthKey,groupBy,sum,clone,parseCSV,toCSV,setText};\n  })();\n\n  // ===== Dialog (modal pop-ups)\n  const Dialog = (()=>{\n    const dlg = document.getElementById('dialog');\n    const msg = document.getElementById('dialog-message');\n    const ok = document.getElementById('dialog-ok');\n    const cancel = document.getElementById('dialog-cancel');\n    const open = (type, message, showCancel)=>{\n      dlg.className = `dialog ${type}`;\n      msg.textContent = message;\n      return new Promise(resolve=>{\n        cancel.classList.toggle('hidden', !showCancel);\n        ok.onclick = ()=>{ dlg.close(); resolve(true); };\n        cancel.onclick = ()=>{ dlg.close(); resolve(false); };\n        dlg.oncancel = (e)=>{ e.preventDefault(); dlg.close(); resolve(false); };\n        dlg.showModal();\n      });\n    };\n    const alert = (m)=>open('alert',m,false).then(()=>{});\n    const info = (m)=>open('info',m,false).then(()=>{});\n    const confirm = (m)=>open('confirm',m,true);\n    return {alert,info,confirm};\n  })();\n\n  // ===== Storage (localStorage) \u2013 closure encapsulation\n  const Store = (()=>{\n    const KEY = 'budget.local.v1';\n    const load = ()=>{\n      try{\n        return JSON.parse(localStorage.getItem(KEY)) || {version:1, months:{}, mapping:{exact:{}, tokens:{}}, descMap:{exact:{}, tokens:{}}, ui:{collapsed:{}}, descList:[], notes:[]};\n      }\n      catch{\n        return {version:1, months:{}, mapping:{exact:{}, tokens:{}}, descMap:{exact:{}, tokens:{}}, ui:{collapsed:{}}, descList:[], notes:[]};\n      }\n    };\n    const save = (state)=>localStorage.setItem(KEY, JSON.stringify(state));\n    const state = load();\n    for(const m of Object.values(state.months||{})){\n      m.categories = m.categories || {};\n    }\n    state.notes = state.notes || [];\n    if(state.categories){\n      for(const m of Object.values(state.months)){\n        m.categories = {...Utils.clone(state.categories), ...m.categories};\n      }\n      delete state.categories;\n      save(state);\n    }\n    const getMonth = (mk)=> state.months[mk];\n    const setMonth = (mk, data)=>{ state.months[mk]=data; save(state); };\n    const deleteMonth = (mk)=>{\n      if(!state.months[mk]) return;\n      delete state.months[mk];\n      if(state.ui?.collapsed){\n        delete state.ui.collapsed[mk];\n      }\n      save(state);\n    };\n    const allMonths = ()=> Object.keys(state.months).sort();\n    const categories = (mk)=> state.months[mk]?.categories || {};\n    const mapping = ()=> state.mapping;\n    const setMapping = (m)=>{ state.mapping = m; save(state); };\n    const descMap = ()=> state.descMap || (state.descMap={exact:{},tokens:{}});\n    const setDescMap = (m)=>{ state.descMap = m; save(state); };\n    const descList = ()=> state.descList || (state.descList=[]);\n    const setDescList = (list)=>{ state.descList = list; save(state); };\n    const exportData = (kind, mk)=>{\n      if(kind==='transactions'){\n        const m = state.months[mk];\n        return m ? (m.transactions||[]) : [];\n      }\n      if(kind==='categories'){\n        const m = state.months[mk];\n        return {categories: m ? (m.categories||{}) : {}};\n      }\n      if(kind==='prediction'){\n        return {mapping: state.mapping, descMap: state.descMap, descList: state.descList||[]};\n      }\n      // all data\n      return {version:state.version, months: state.months, mapping: state.mapping, descMap: state.descMap, descList: state.descList||[]};\n    };\n    const importData = (json)=>{\n      const incoming = typeof json === 'string' ? JSON.parse(json) : json;\n      if(!incoming || !incoming.months) return;\n      state.version = incoming.version || state.version;\n      state.mapping.exact = {...state.mapping.exact, ...(incoming.mapping?.exact||{})};\n      for(const [k,v] of Object.entries(incoming.mapping?.tokens||{})){\n        const cur = state.mapping.tokens[k] || {};\n        for(const [cat,cnt] of Object.entries(v)) cur[cat] = (cur[cat]||0)+cnt;\n        state.mapping.tokens[k] = cur;\n      }\n      state.descMap = state.descMap || {exact:{},tokens:{}};\n      state.descMap.exact = {...state.descMap.exact, ...(incoming.descMap?.exact||{})};\n      for(const [k,v] of Object.entries(incoming.descMap?.tokens||{})){\n        const cur = state.descMap.tokens[k] || {};\n        for(const [desc,cnt] of Object.entries(v)) cur[desc] = (cur[desc]||0)+cnt;\n        state.descMap.tokens[k] = cur;\n      }\n      const inList = incoming.descList || [];\n      const curList = descList();\n      for(const d of inList){\n        if(!curList.some(x=>x.toLowerCase()===d.toLowerCase())) curList.push(d);\n      }\n      state.descList = curList;\n      if(incoming.categories){\n        for(const m of Object.values(incoming.months)){\n          m.categories = {...incoming.categories, ...(m.categories||{})};\n        }\n      }\n      for(const [mk,month] of Object.entries(incoming.months)){\n        month.categories = month.categories || {};\n        state.months[mk]=month;\n      } // last-write-wins\n      save(state);\n    };\n    // Collapsed groups (UI state)\n    const collapsedFor = (mk)=>{ state.ui = state.ui || {collapsed:{}}; state.ui.collapsed = state.ui.collapsed || {}; state.ui.collapsed[mk] = state.ui.collapsed[mk] || {}; return state.ui.collapsed[mk]; };\n    const isCollapsed = (mk,g)=> !!collapsedFor(mk)[g];\n    const setCollapsed = (mk,g,val)=>{ collapsedFor(mk)[g]=!!val; save(state); };\n    const toggleCollapsed = (mk,g)=>{ setCollapsed(mk,g,!isCollapsed(mk,g)); };\n    const setAllCollapsed = (mk, groups, val)=>{ const obj = collapsedFor(mk); (groups||[]).forEach(g=>obj[g]=!!val); save(state); };\n    const notes = ()=> state.notes || [];\n    const setNotes = (list)=>{ state.notes = list; save(state); };\n    return {state,getMonth,setMonth,deleteMonth,allMonths,categories,mapping,setMapping,descMap,setDescMap,descList,setDescList,exportData,importData,collapsedFor,isCollapsed,setCollapsed,toggleCollapsed,setAllCollapsed,notes,setNotes};\n  })();\n\n  // ===== Charts (vanilla Canvas)\n  const Charts = (()=>{\n    const bar = (canvas, labels, series)=>{\n      if(!canvas) return; const ctx = canvas.getContext('2d');\n      const W = canvas.width = canvas.clientWidth*2; const H = canvas.height = canvas.clientHeight*2;\n      ctx.clearRect(0,0,W,H); ctx.font = '24px system-ui'; ctx.fillStyle = '#111';\n      const left=90, right=40, bottom=80, top=30; const plotW=W-left-right, plotH=H-top-bottom;\n      const max = Math.max(1, ...series.flat());\n      // axes\n      ctx.strokeStyle = '#e5e7eb'; ctx.lineWidth=2; ctx.beginPath(); ctx.moveTo(left,top); ctx.lineTo(left,H-bottom); ctx.lineTo(W-right,H-bottom); ctx.stroke();\n      const n = labels.length; const groups = series.length; const band = plotW/n; const barW = Math.min(50,(band-20)/groups);\n      const colors = ['#f59e0b','#0ea5e9','#10b981','#ef4444','#8b5cf6'];\n      labels.forEach((lab,i)=>{\n        const x0 = left + i*band + 10;\n        series.forEach((s,g)=>{\n          const val = s[i]||0; const h = (val/max)*plotH; const x = x0 + g*(barW+8); const y = H-bottom - h;\n          ctx.fillStyle = colors[g%colors.length]; ctx.fillRect(x,y,barW,h);\n        });\n        ctx.save(); ctx.fillStyle = '#374151'; ctx.textAlign='center';\n        ctx.translate(x0+band/2-10,H-bottom+28); ctx.rotate(-0.2); ctx.fillText(lab,0,0); ctx.restore();\n      });\n      // legend\n      const names = ['Budget','Actual'];\n      names.forEach((name,i)=>{ ctx.fillStyle = colors[i]; ctx.fillRect(left + i*160, 8, 28, 18); ctx.fillStyle='#111'; ctx.fillText(name, left + i*160 + 36, 24); });\n    };\n\n    const donut = (canvas, parts)=>{\n      if(!canvas) return; const ctx = canvas.getContext('2d');\n      const W = canvas.width = canvas.clientWidth*2; const H = canvas.height = canvas.clientHeight*2;\n      ctx.clearRect(0,0,W,H);\n      const cx=W/2, cy=H/2, r=Math.min(W,H)/3, r2=r*0.64; const total = Object.values(parts).reduce((a,b)=>a+b,0)||1;\n      let start=-Math.PI/2; const colors=['#0ea5e9','#ef4444','#10b981','#f59e0b','#8b5cf6','#14b8a6','#e11d48','#84cc16','#06b6d4'];\n      let i=0; for(const [k,v] of Object.entries(parts)){\n        const ang = (v/total)*Math.PI*2; ctx.beginPath(); ctx.moveTo(cx,cy); ctx.fillStyle = colors[i++%colors.length];\n        ctx.arc(cx,cy,r,start,start+ang); ctx.closePath(); ctx.fill();\n        // label\n        const mid=start+ang/2; const lx=cx+Math.cos(mid)*(r+24); const ly=cy+Math.sin(mid)*(r+24);\n        ctx.fillStyle='#111'; ctx.font='22px system-ui'; ctx.fillText(`${k}`, lx-10, ly);\n        start += ang;\n      }\n      // hole\n      ctx.globalCompositeOperation='destination-out'; ctx.beginPath(); ctx.arc(cx,cy,r2,0,Math.PI*2); ctx.fill(); ctx.globalCompositeOperation='source-over';\n      ctx.fillStyle='#111'; ctx.font='28px system-ui'; ctx.textAlign='center'; ctx.fillText('Budget',cx,cy+10);\n    };\n\n    return {bar,donut};\n  })();\n\n  // ===== Predictor (learn tokens)\n  const Predictor = (()=>{\n    const tokensOf = (s)=> (s||'').toLowerCase().replace(/[^a-z0-9\\s]/g,' ').split(/\\s+/).filter(Boolean);\n    const predict = (desc, cats, amount)=>{\n      const map = Store.mapping();\n      const base = desc?.trim().toLowerCase();\n      if(!base) return '';\n      if(amount !== undefined && !isNaN(amount)){\n        const amtKey = base + '|' + Number(amount).toFixed(2);\n        const exactAmt = map.exact[amtKey];\n        if(exactAmt) return exactAmt;\n      }\n      const exact = map.exact[base];\n      if(exact) return exact;\n      const tok = tokensOf(desc);\n      const scores = {};\n      for(const t of tok){\n        const counts = map.tokens[t];\n        if(counts) for(const [cat,v] of Object.entries(counts)) scores[cat]=(scores[cat]||0)+v;\n      }\n      let best=null, bestScore=0; for(const [cat,score] of Object.entries(scores)) if(score>bestScore){best=cat;bestScore=score;}\n      return best && cats.includes(best) ? best : '';\n    };\n    const learn = (desc, cat, amount)=>{\n      if(!desc||!cat) return; const map = Store.mapping();\n      const base = desc.trim().toLowerCase();\n      if(amount !== undefined && !isNaN(amount)){\n        const amtKey = base + '|' + Number(amount).toFixed(2);\n        map.exact[amtKey] = cat;\n      } else {\n        map.exact[base] = cat;\n      }\n      for(const t of desc.toLowerCase().split(/\\s+/).filter(Boolean)){\n        const bag = map.tokens[t]||{}; bag[cat]=(bag[cat]||0)+1; map.tokens[t]=bag;\n      }\n      Store.setMapping(map);\n    };\n    return {predict,learn};\n  })();\n\n  // ===== Description Predictor (learn full descriptions)\n  const DescPredictor = (()=>{\n    const predict = (partial)=>{\n      if(!partial) return [];\n      const list = Store.descList();\n      const lower = partial.trim().toLowerCase();\n      return list.filter(d=>d.toLowerCase().startsWith(lower)).slice(0,4);\n    };\n    const learn = (desc)=>{\n      if(!desc) return;\n      const list = Store.descList();\n      const norm = desc.trim();\n      const exists = list.some(d=>d.toLowerCase()===norm.toLowerCase());\n      if(!exists){\n        list.push(norm);\n        Store.setDescList(list);\n      }\n    };\n    return {predict,learn};\n  })();\n\n  // ===== Model for a Month\n  const Model = (()=>{\n    const emptyMonth = ()=>({\n      incomes:[],\n      transactions:[], // {id,date,desc,amount,category}\n      categories:{}\n    });\n\n    // Default empty template \u2013 start with no categories or incomes\n    const template = () => emptyMonth();\n\n    const addCat = (month, name, group, budget)=>{\n      month.categories[name] = {group, budget: Number(budget)||0};\n    };\n\n    const setCat = (month, name, group, budget)=>{ addCat(month,name,group,budget); };\n    const delCat = (month, name)=>{ delete month.categories[name]; };\n\n    const addIncome = (month, name, amount)=>{ month.incomes.push({id:Utils.id(), name, amount:Number(amount)||0}); };\n    const setIncome = (month, id, name, amount)=>{\n      const inc = month.incomes.find(x=>x.id===id);\n      if(inc){ inc.name = name; inc.amount = Number(amount)||0; }\n    };\n    const delIncome = (month, id)=>{ month.incomes = month.incomes.filter(x=>x.id!==id); };\n\n    const addTx = (month, {date,desc,amount,category})=>{ month.transactions.push({id:Utils.id(),date,desc,amount:Number(amount)||0,category}); };\n    const delTx = (month, id)=>{ month.transactions = month.transactions.filter(x=>x.id!==id); };\n    const clearTx = (month)=>{ month.transactions = []; };\n\n    const totals = (month)=>{\n      const income = Utils.sum(month.incomes, x=>x.amount);\n      const budgetPerCat = {}; const actualPerCat = {};\n      const cats = month.categories || {};\n      for(const [name,meta] of Object.entries(cats)) budgetPerCat[name]=(meta.budget||0);\n      for(const tx of month.transactions) actualPerCat[tx.category]=(actualPerCat[tx.category]||0)+tx.amount;\n      const groups = {};\n      for(const [cat,meta] of Object.entries(cats)){\n        const g = meta.group||'Other';\n        const b = budgetPerCat[cat]||0; const a = actualPerCat[cat]||0;\n        const gg = groups[g] || {budget:0,actual:0}; gg.budget+=b; gg.actual+=a; groups[g]=gg;\n      }\n      const budgetTotal = Utils.sum(Object.values(budgetPerCat));\n      const actualTotal = Utils.sum(Object.values(actualPerCat));\n      return {income,budgetPerCat,actualPerCat,groups,budgetTotal,actualTotal,leftoverActual: income-actualTotal,leftoverBudget: income-budgetTotal};\n    };\n\n    return {emptyMonth,template,addCat,setCat,delCat,addIncome,setIncome,delIncome,addTx,delTx,clearTx,totals};\n  })();\n\n  // ===== UI Controller\n  const UI = (()=>{\n    const els = {\n      headerMonth: document.getElementById('header-month'),\n      leftoverPill: document.getElementById('leftover-pill'),\n      leftoverPillActual: document.getElementById('leftover-pill-actual'),\n      leftoverPillPrediction: document.getElementById('leftover-pill-prediction'),\n      monthPicker: document.getElementById('month-picker'),\n      newMonth: document.getElementById('new-month'),\n      deleteNextMonth: document.getElementById('delete-next-month'),\n      openMonth: document.getElementById('open-month'),\n      exportBtn: document.getElementById('export-data'),\n      exportDialog: document.getElementById('export-dialog'),\n      exportKind: document.getElementById('export-kind'),\n      exportMonth: document.getElementById('export-month'),\n      exportMonthRow: document.getElementById('export-month-row'),\n      exportType: document.getElementById('export-type'),\n      exportTypeRow: document.getElementById('export-type-row'),\n      exportConfirm: document.getElementById('export-confirm'),\n      exportCancel: document.getElementById('export-cancel'),\n      importBtn: document.getElementById('import-trans'),\n      importDialog: document.getElementById('import-dialog'),\n      importKind: document.getElementById('import-kind'),\n      importMonth: document.getElementById('import-month'),\n      importMonthRow: document.getElementById('import-month-row'),\n      importType: document.getElementById('import-type'),\n      importTypeRow: document.getElementById('import-type-row'),\n      importFile: document.getElementById('import-file'),\n      importConfirm: document.getElementById('import-confirm'),\n      importCancel: document.getElementById('import-cancel'),\n      csvMapDialog: document.getElementById('csv-map-dialog'),\n      csvMapDate: document.getElementById('csv-map-date'),\n      csvMapDesc: document.getElementById('csv-map-desc'),\n      csvMapCat: document.getElementById('csv-map-cat'),\n      csvMapAmt: document.getElementById('csv-map-amt'),\n      csvMapHeader: document.getElementById('csv-map-header'),\n      csvMapInvert: document.getElementById('csv-map-invert'),\n      csvMapConfirm: document.getElementById('csv-map-confirm'),\n      csvMapCancel: document.getElementById('csv-map-cancel'),\n      calendarDialog: document.getElementById('calendar-dialog'),\n      calendarContainer: document.getElementById('calendar-container'),\n      calendarClose: document.getElementById('calendar-close'),\n      calendarPrev: document.getElementById('calendar-prev'),\n      calendarNext: document.getElementById('calendar-next'),\n      calendarMonth: document.getElementById('calendar-month'),\n      notesDialog: document.getElementById('notes-dialog'),\n      noteDesc: document.getElementById('note-desc'),\n      noteData: document.getElementById('note-data'),\n      addNote: document.getElementById('add-note'),\n      notesList: document.getElementById('notes-list'),\n      notesClose: document.getElementById('notes-close'),\n\n      // Tabs\n      tabBudget: document.getElementById('tab-budget'),\n      tabTx: document.getElementById('tab-transactions'),\n      tabAnalysis: document.getElementById('tab-analysis'),\n      tabCalendar: document.getElementById('tab-calendar'),\n      tabNotes: document.getElementById('tab-notes'),\n      tabLearning: document.getElementById('tab-learning'),\n      panelBudget: document.getElementById('panel-budget'),\n      panelTx: document.getElementById('panel-transactions'),\n      panelAnalysis: document.getElementById('panel-analysis'),\n      panelLearning: document.getElementById('panel-learning'),\n      analysisSelect: document.getElementById('analysis-select'),\n      analysisChartType: document.getElementById('analysis-chart-type'),\n      analysisPlannedTitle: document.getElementById('analysis-planned-title'),\n      analysisActualTitle: document.getElementById('analysis-actual-title'),\n      analysisChart: document.getElementById('analysis-chart'),\n      analysisChartActual: document.getElementById('analysis-chart-actual'),\n      analysisCharts: document.getElementById('analysis-charts'),\n      analysisTotal: document.getElementById('analysis-total'),\n      analysisMonthRow: document.getElementById('analysis-month-row'),\n      analysisMonth: document.getElementById('analysis-month'),\n      analysisYearRow: document.getElementById('analysis-year-row'),\n      analysisYear: document.getElementById('analysis-year'),\n      analysisGroupRow: document.getElementById('analysis-group-row'),\n      analysisGroup: document.getElementById('analysis-group'),\n      analysisCategoryRow: document.getElementById('analysis-category-row'),\n      analysisCategory: document.getElementById('analysis-category'),\n\n      // Income\n      incomeList: document.getElementById('income-list'),\n      incomeName: document.getElementById('income-name'),\n      incomeAmount: document.getElementById('income-amount'),\n      addIncome: document.getElementById('add-income'),\n      totalIncome: document.getElementById('total-income'),\n      leftoverActual: document.getElementById('leftover-actual'),\n\n      // Categories table\n      catName: document.getElementById('cat-name'),\n      catGroup: document.getElementById('cat-group'),\n      catBudget: document.getElementById('cat-budget'),\n      addCategory: document.getElementById('add-category'),\n      collapseAll: document.getElementById('collapse-all'),\n      expandAll: document.getElementById('expand-all'),\n      catTable: document.getElementById('category-table').querySelector('tbody'),\n      totBud: document.getElementById('tot-bud'),\n      totAct: document.getElementById('tot-act'),\n      totDiff: document.getElementById('tot-diff'),\n\n      // Transactions\n      txDate: document.getElementById('tx-date'),\n      txDesc: document.getElementById('tx-desc'),\n      txAmt: document.getElementById('tx-amt'),\n      txCat: document.getElementById('tx-cat'),\n      txSearch: document.getElementById('tx-search'),\n      txFilterCat: document.getElementById('tx-filter-cat'),\n      addTx: document.getElementById('add-tx'),\n      txList: document.getElementById('tx-list'),\n      txTotal: document.getElementById('tx-total'),\n      txJump: document.getElementById('tx-jump'),\n      txDeleteAll: document.getElementById('tx-delete-all'),\n      predictHint: document.getElementById('predict-hint'),\n      descPredictHint: document.getElementById('desc-predict-hint'),\n      descTooltip: document.getElementById('desc-tooltip'),\n\n      // Learning\n      learnDesc: document.getElementById('learn-desc'),\n      learnCat: document.getElementById('learn-cat'),\n      learnAdd: document.getElementById('learn-add'),\n      learnList: document.getElementById('learn-list')\n      };\n\n    let currentMonthKey = Utils.monthKey();\n    let editingIncomeId = null;\n    let editingTxId = null;\n    let editingNoteId = null;\n    let analysisChart = null;\n    let analysisChartActual = null;\n    let calendarDate = new Date();\n    let pendingCSV = null;\n    const ICON_EDIT = `<svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M12 20h9\"/><path d=\"M16.5 3.5l4 4L7 21H3v-4L16.5 3.5z\"/></svg>`;\n    const ICON_DELETE = `<svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"3 6 5 6 21 6\"/><path d=\"M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6m5-3h4a1 1 0 0 1 1 1v2H9V4a1 1 0 0 1 1-1z\"/></svg>`;\n    const ICON_CHEVRONS_DOWN = `<svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"7 13 12 18 17 13\"></polyline><polyline points=\"7 6 12 11 17 6\"></polyline></svg>`;\n    const ICON_CHEVRONS_UP = `<svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"17 11 12 6 7 11\"></polyline><polyline points=\"17 18 12 13 7 18\"></polyline></svg>`;\n    els.txDeleteAll.innerHTML = ICON_DELETE;\n    els.descPredictHint.textContent = 'Desc: \u2013';\n    els.descTooltip.classList.add('hidden');\n    let descSuggestions = [];\n    let descSelIdx = 0;\n\n    const hideDescSuggestions = ()=>{\n      descSuggestions = [];\n      els.descTooltip.classList.add('hidden');\n      els.descTooltip.innerHTML = '';\n    };\n\n    const renderDescSuggestions = ()=>{\n      els.descTooltip.innerHTML = '';\n      descSuggestions.forEach((s,i)=>{\n        const div = document.createElement('div');\n        div.textContent = s;\n        div.className = 'option'+(i===descSelIdx?' selected':'');\n        div.addEventListener('mousedown', (e)=>{\n          e.preventDefault();\n          chooseDescSuggestion(i);\n        });\n        els.descTooltip.appendChild(div);\n      });\n      els.descTooltip.classList.remove('hidden');\n    };\n\n    const highlightDescSuggestion = ()=>{\n      [...els.descTooltip.children].forEach((el,i)=>{\n        el.classList.toggle('selected', i===descSelIdx);\n      });\n    };\n\n    const chooseDescSuggestion = (i)=>{\n      if(!descSuggestions[i]) return;\n      els.txDesc.value = descSuggestions[i] + ' ';\n      hideDescSuggestions();\n      els.txDesc.dispatchEvent(new Event('input'));\n    };\n\n    // ---- init data if empty\n    (function bootstrap(){\n      if(Store.allMonths().length===0){\n        const mk = Utils.monthKey(new Date());\n        const month = Model.template();\n        // Initialize with an empty month; no default incomes\n        Store.setMonth(mk, month);\n      }\n      currentMonthKey = Store.allMonths().slice(-1)[0] || Utils.monthKey();\n      els.monthPicker.value = currentMonthKey;\n    })();\n\n    function loadMonth(mk){\n      const month = Store.getMonth(mk);\n      if(!month) return;\n      editingIncomeId = null; els.addIncome.textContent='Add Income';\n      editingTxId = null; els.addTx.textContent='Add';\n      currentMonthKey = mk; els.headerMonth.textContent = new Date(mk+'-01').toLocaleString(undefined,{month:'long',year:'numeric'});\n      // populate incomes\n      els.incomeList.innerHTML = '';\n      month.incomes.forEach(x=> addIncomeRow(x));\n      // populate categories\n      renderCategories(month);\n      // populate tx dropdown and list\n      refreshCategoryDropdowns();\n      els.txSearch.value='';\n      els.txFilterCat.value='';\n      renderTransactions(month);\n      // refresh open-month select\n      refreshMonthPicker();\n      // charts + KPIs\n      refreshKPIs();\n    }\n\n    const getNextStoredMonthKey = (monthsList)=>{\n      const months = monthsList || Store.allMonths();\n      const idx = months.indexOf(currentMonthKey);\n      return idx>=0 ? months[idx+1] : null;\n    };\n\n    const updateDeleteNextMonthButton = (monthsList)=>{\n      if(!els.deleteNextMonth) return;\n      const nextKey = getNextStoredMonthKey(monthsList);\n      if(nextKey){\n        const label = new Date(nextKey+'-01').toLocaleString(undefined,{month:'short',year:'numeric'});\n        els.deleteNextMonth.disabled = false;\n        els.deleteNextMonth.title = `Delete ${label} from your budget`;\n      }else{\n        els.deleteNextMonth.disabled = true;\n        els.deleteNextMonth.removeAttribute('title');\n      }\n    };\n\n    function refreshMonthPicker(){\n      const months = Store.allMonths();\n      const opts = months.map(mk=>`<option value=\"${mk}\" ${mk===currentMonthKey?'selected':''}>${new Date(mk+'-01').toLocaleString(undefined,{month:'short',year:'numeric'})}</option>`).join('');\n      els.openMonth.innerHTML = `<option value=\"\">Select Month</option>` + opts;\n      els.openMonth.value = currentMonthKey;\n      updateDeleteNextMonthButton(months);\n    }\n\n    function addIncomeRow(x){\n      const row = document.createElement('div'); row.className='list-item';\n      row.innerHTML = `<div class=\"grow\"><strong>${x.name}</strong><div><small></small></div></div>`+\n                      `<div class=\"actions\"><button class=\"icon-btn\" data-act=\"edit\" aria-label=\"Edit\">${ICON_EDIT}</button> <button class=\"icon-btn\" data-act=\"del\" aria-label=\"Delete\">${ICON_DELETE}</button></div>`;\n      Utils.setText(row.querySelector('small'), x.amount);\n      row.onclick = async (e)=>{\n        const act = e.target.closest('button')?.dataset?.act; if(!act) return;\n        const m=Store.getMonth(currentMonthKey);\n        if(act==='del'){\n          if(await Dialog.confirm('Delete this income?')){ Model.delIncome(m,x.id); Store.setMonth(currentMonthKey,m); loadMonth(currentMonthKey); }\n        }\n        if(act==='edit'){ els.incomeName.value=x.name; els.incomeAmount.value=x.amount; editingIncomeId=x.id; els.addIncome.textContent='Update Income'; }\n      };\n      els.incomeList.appendChild(row);\n    }\n\n    function renderCategories(month){\n      els.catTable.innerHTML='';\n      const totals = Model.totals(month);\n      const cats = month.categories || {};\n      const entries = Object.entries(cats);\n      const byGroup = {};\n      for(const [name,meta] of entries){ const g=meta.group||'Other'; (byGroup[g]=byGroup[g]||[]).push([name,meta]); }\n      const groups = Object.keys(byGroup).sort();\n      for(const g of groups){\n        const gBud = totals.groups[g]?.budget||0; const gAct = totals.groups[g]?.actual||0; const gDiff = gBud - gAct; const gCls = gDiff>=0?'success':'danger'; const gBudCls = gBud<0?'danger':''; const gActCls = gAct<0?'danger':'';\n        const collapsed = Store.isCollapsed(currentMonthKey,g); const icon = collapsed ? '\u25B6' : '\u25BC';\n        const trh = document.createElement('tr'); trh.className='group-row';\n        trh.innerHTML = `<td colspan=\"2\"><button class=\"toggle\" data-group=\"${g}\" aria-label=\"toggle\">${icon}</button><strong>${g}</strong></td>\n                         <td class=\"right ${gBudCls}\">${Utils.fmt(gBud)}</td>\n                         <td class=\"right ${gActCls}\">${Utils.fmt(gAct)}</td>\n                         <td class=\"right ${gCls}\">${Utils.fmt(gDiff)}</td>\n                         <td></td>`;\n        trh.querySelector('button.toggle').onclick = (e)=>{ e.stopPropagation(); Store.toggleCollapsed(currentMonthKey,g); renderCategories(month); };\n        els.catTable.appendChild(trh);\n        const items = byGroup[g].sort((a,b)=> a[0].localeCompare(b[0]));\n        for(const [name,meta] of items){\n          const act = totals.actualPerCat[name]||0; const diff = (meta.budget||0) - act; const cls = diff>=0?'success':'danger'; const budCls = (meta.budget||0)<0?'danger':''; const actCls = act<0?'danger':'';\n          const tr = document.createElement('tr'); if(collapsed) tr.classList.add('hidden'); tr.dataset.cat=name; tr.dataset.group=g;\n          tr.innerHTML = `<td></td>\n                          <td>${name}</td>\n                          <td class=\"right ${budCls}\">${Utils.fmt(meta.budget||0)}</td>\n                          <td class=\"right ${actCls}\">${Utils.fmt(act)}</td>\n                          <td class=\"right ${cls}\">${Utils.fmt(diff)}</td>\n                          <td class=\"right\"><div class=\"actions\"><button class=\"icon-btn\" data-act=\"edit\" aria-label=\"Edit\">${ICON_EDIT}</button> <button class=\"icon-btn\" data-act=\"del\" aria-label=\"Delete\">${ICON_DELETE}</button></div></td>`;\n          tr.onclick = async (e)=>{\n            const actn = e.target.closest('button')?.dataset?.act; if(!actn) return;\n            if(actn==='del'){\n              if(await Dialog.confirm('Delete this category?')){ Model.delCat(month,name); Store.setMonth(currentMonthKey, month); renderCategories(month); refreshKPIs(); refreshCategoryDropdowns(); }\n            }\n            if(actn==='edit'){ els.catName.value=name; els.catGroup.value=meta.group||''; els.catBudget.value=meta.budget||0; }\n          };\n          els.catTable.appendChild(tr);\n        }\n      }\n        const t = Model.totals(month);\n        Utils.setText(els.totBud, t.budgetTotal);\n        Utils.setText(els.totAct, t.actualTotal);\n        Utils.setText(els.totDiff, t.budgetTotal - t.actualTotal);\n      }\n\n    function refreshCategoryDropdowns(){\n      const cats = Store.categories(currentMonthKey);\n      const opts = Object.keys(cats).sort().map(c=>`<option>${c}</option>`).join('');\n      const curFilter = els.txFilterCat.value;\n      els.txCat.innerHTML = `<option value=\"\">\u2014 select \u2014</option>`+opts;\n      els.learnCat.innerHTML = opts;\n      els.txFilterCat.innerHTML = `<option value=\"\">All categories</option>`+opts;\n      els.txFilterCat.value = curFilter;\n    }\n\n    function renderTransactions(month){\n      els.txList.innerHTML='';\n      const search = els.txSearch.value.trim().toLowerCase();\n      const filterCat = els.txFilterCat.value;\n      const items = month.transactions\n        .filter(t => (search === '' || t.desc.toLowerCase().includes(search)) &&\n                     (!filterCat || t.category === filterCat))\n        .slice()\n        .sort((a,b)=> a.date.localeCompare(b.date));\n      const byDate = Utils.groupBy(items, t=>t.date);\n      const dates = Object.keys(byDate).sort();\n      let idx = 1;\n      let runningTotal = 0;\n      for(const date of dates){\n        const dayTotal = Utils.sum(byDate[date], t=>t.amount);\n        const dayCount = byDate[date].length;\n        runningTotal += dayTotal;\n\n        const hdr = document.createElement('div');\n        hdr.className = 'tx-date';\n        const dateLabel = new Date(date).toLocaleDateString(undefined,{weekday:'short', day:'numeric', month:'short'});\n        hdr.innerHTML = `<span>${dateLabel}<span class=\"tx-count\"><span class=\"badge\">${dayCount}</span> transactions</span></span>`+\n                        `<span class=\"totals\"><span class=\"day\"></span><span class=\"run\"></span></span>`;\n        const dayEl = hdr.querySelector('.day');\n        dayEl.textContent = `Day: ${Utils.fmt(dayTotal)}`;\n        if(dayTotal < 0) dayEl.classList.add('danger');\n        const runEl = hdr.querySelector('.run');\n        runEl.textContent = `Total: ${Utils.fmt(runningTotal)}`;\n        if(runningTotal < 0) runEl.classList.add('danger');\n        els.txList.appendChild(hdr);\n\n        for(const t of byDate[date]){\n            const row = document.createElement('div'); row.className='list-item';\n            const aCls = t.amount<0?'danger':'';\n            row.innerHTML = `<div class=\"tx-index\">${idx++}</div>`+\n                             `<div class=\"grow\"><strong>${t.desc}</strong><div><small>${t.category||'Uncategorised'}</small></div></div>`+\n                             `<div class=\"tx-amount ${aCls}\">${Utils.fmt(t.amount)}</div>`+\n                             `<div class=\"actions\"><button class=\"icon-btn\" data-act=\"edit\" data-id=\"${t.id}\" aria-label=\"Edit\">${ICON_EDIT}</button> <button class=\"icon-btn\" data-act=\"del\" data-id=\"${t.id}\" aria-label=\"Delete\">${ICON_DELETE}</button></div>`;\n          row.querySelector('[data-act=\"del\"]').onclick = async ()=>{\n            if(await Dialog.confirm('Delete this transaction?')){ const m=Store.getMonth(currentMonthKey); Model.delTx(m,t.id); Store.setMonth(currentMonthKey,m); loadMonth(currentMonthKey); }\n          };\n          row.querySelector('[data-act=\"edit\"]').onclick = ()=>{ els.txDate.value=t.date; els.txDesc.value=t.desc; els.txAmt.value=t.amount; els.txCat.value=t.category; editingTxId=t.id; els.addTx.textContent='Update'; };\n          els.txList.appendChild(row);\n        }\n      }\n      const total = Utils.sum(items, t=>t.amount);\n      Utils.setText(els.txTotal, total);\n      refreshKPIs();\n      updateTxJump();\n    }\n\n    function refreshKPIs(){\n      const month = Store.getMonth(currentMonthKey);\n      const t = Model.totals(month);\n      Utils.setText(els.totalIncome, t.income);\n      Utils.setText(els.leftoverActual, t.leftoverActual);\n\n      const actualText = `Left Over ${Utils.fmt(t.leftoverActual)}`;\n      if(els.leftoverPillActual){\n        els.leftoverPillActual.textContent = actualText;\n        els.leftoverPillActual.classList.toggle('danger', t.leftoverActual < 0);\n      }else{\n        els.leftoverPill.textContent = actualText;\n      }\n      els.leftoverPill.classList.toggle('danger', t.leftoverActual < 0);\n\n      const prediction = predictMonthBalance(currentMonthKey, Store.state.months);\n      if(els.leftoverPillPrediction){\n        if(prediction && Number.isFinite(prediction.predictedLeftover)){\n          const predicted = prediction.predictedLeftover;\n          els.leftoverPillPrediction.textContent = `Predicted ${Utils.fmt(predicted)}`;\n          els.leftoverPillPrediction.classList.toggle('danger', predicted < 0);\n          if(prediction.sampleSize){\n            const plural = prediction.sampleSize === 1 ? '' : 's';\n            const dayLabel = typeof prediction.remainderUsedDay === 'number'\n              ? `day ${prediction.remainderUsedDay}`\n              : 'historical data';\n            els.leftoverPillPrediction.title = `Based on ${prediction.sampleSize} historical month${plural} (${dayLabel}).`;\n          }else{\n            els.leftoverPillPrediction.removeAttribute('title');\n          }\n        }else{\n          els.leftoverPillPrediction.textContent = 'Predicted \u2013';\n          els.leftoverPillPrediction.classList.remove('danger');\n          els.leftoverPillPrediction.removeAttribute('title');\n        }\n      }\n    }\n\n    function addNoteRow(n){\n      const row = document.createElement('div'); row.className='list-item';\n      const time = new Date(n.time).toLocaleString();\n      row.innerHTML = `<div class=\"grow\"><strong>${n.desc}</strong><div class=\"note-text\">${n.data}</div><div><small>${time}</small></div></div>`+\n                      `<div class=\"actions\"><button class=\"icon-btn\" data-act=\"edit\" data-id=\"${n.id}\" aria-label=\"Edit\">${ICON_EDIT}</button> <button class=\"icon-btn\" data-act=\"del\" data-id=\"${n.id}\" aria-label=\"Delete\">${ICON_DELETE}</button></div>`;\n      row.onclick = async (e)=>{\n        const act = e.target.closest('button')?.dataset?.act; if(!act) return;\n        const notes = Store.notes();\n        const idx = notes.findIndex(x=>x.id===n.id);\n        if(act==='del'){\n          if(await Dialog.confirm('Delete this note?')){ notes.splice(idx,1); Store.setNotes(notes); renderNotes(); }\n        }\n        if(act==='edit'){\n          els.noteDesc.value = n.desc;\n          els.noteData.value = n.data;\n          editingNoteId = n.id;\n          els.addNote.textContent = 'Update Note';\n        }\n      };\n      els.notesList.appendChild(row);\n    }\n\n    function renderNotes(){\n      els.notesList.innerHTML = '';\n      const notes = Store.notes();\n      notes.forEach(n=> addNoteRow(n));\n    }\n\n    // ---- Event wiring\n    els.addIncome.onclick = ()=>{\n      const name = els.incomeName.value.trim() || 'Income';\n      const amt = parseFloat(els.incomeAmount.value||'0');\n      const m = Store.getMonth(currentMonthKey);\n      if(editingIncomeId){\n        Model.setIncome(m, editingIncomeId, name, amt);\n        editingIncomeId = null; els.addIncome.textContent='Add Income';\n      }else{\n        Model.addIncome(m,name,amt);\n      }\n      Store.setMonth(currentMonthKey,m);\n      els.incomeName.value=''; els.incomeAmount.value='';\n      loadMonth(currentMonthKey);\n    };\n\n    els.addCategory.onclick = ()=>{\n      const name = els.catName.value.trim(); const group = els.catGroup.value.trim()||'Other'; const bud = parseFloat(els.catBudget.value||'0');\n      if(!name) return;\n      const m = Store.getMonth(currentMonthKey);\n      Model.setCat(m,name,group,bud);\n      Store.setMonth(currentMonthKey,m);\n      els.catName.value=''; els.catGroup.value=''; els.catBudget.value=''; loadMonth(currentMonthKey);\n    };\n\n    // Collapse/Expand all groups\n    els.collapseAll.onclick = ()=>{\n      const m = Store.getMonth(currentMonthKey);\n      const groups = [...new Set(Object.values(Store.categories(currentMonthKey)).map(x=>x.group||'Other'))];\n      Store.setAllCollapsed(currentMonthKey, groups, true); renderCategories(m);\n    };\n    els.expandAll.onclick = ()=>{\n      const m = Store.getMonth(currentMonthKey);\n      const groups = [...new Set(Object.values(Store.categories(currentMonthKey)).map(x=>x.group||'Other'))];\n      Store.setAllCollapsed(currentMonthKey, groups, false); renderCategories(m);\n    };\n\n    // Transaction prediction\n    els.txDesc.addEventListener('input', ()=>{\n      const cats = Object.keys(Store.categories(currentMonthKey));\n      const guess = Predictor.predict(els.txDesc.value, cats, parseFloat(els.txAmt.value));\n      els.predictHint.textContent = 'Prediction: '+(guess||'\u2013');\n      if(guess){ els.txCat.value = guess; }\n      const val = els.txDesc.value;\n      const matches = DescPredictor.predict(val);\n      els.descPredictHint.textContent = 'Desc: '+(matches[0]||'\u2013');\n      descSuggestions = matches.filter(d=>d.toLowerCase() !== val.trim().toLowerCase());\n      if(descSuggestions.length){\n        descSelIdx = 0;\n        renderDescSuggestions();\n      }else{\n        hideDescSuggestions();\n      }\n    });\n\n    els.txDesc.addEventListener('keydown', (e)=>{\n      if(!descSuggestions.length) return;\n      if(e.key === 'ArrowDown'){\n        e.preventDefault();\n        descSelIdx = (descSelIdx + 1) % descSuggestions.length;\n        highlightDescSuggestion();\n      }else if(e.key === 'ArrowUp'){\n        e.preventDefault();\n        descSelIdx = (descSelIdx - 1 + descSuggestions.length) % descSuggestions.length;\n        highlightDescSuggestion();\n      }else if(e.key === 'Enter'){\n        e.preventDefault();\n        chooseDescSuggestion(descSelIdx);\n      }\n    });\n\n    els.txDesc.addEventListener('blur', ()=>{\n      setTimeout(hideDescSuggestions, 100);\n    });\n    const handleAddTx = ()=>{\n      const date = els.txDate.value.trim();\n      const desc = els.txDesc.value.trim();\n      const amt = parseFloat(els.txAmt.value);\n      const cat = els.txCat.value;\n      if(!date || !desc || isNaN(amt)) return;\n      const m = Store.getMonth(currentMonthKey);\n      if(editingTxId){\n        const tx = m.transactions.find(x=>x.id===editingTxId);\n        if(tx){ tx.date=date; tx.desc=desc; tx.amount=amt; tx.category=cat; }\n        editingTxId = null; els.addTx.textContent='Add';\n      } else {\n        Model.addTx(m,{date,desc,amount:amt,category:cat});\n      }\n      Store.setMonth(currentMonthKey,m);\n      Predictor.learn(desc,cat,amt);\n      DescPredictor.learn(desc);\n      els.txDesc.value=''; els.txAmt.value='';\n      renderTransactions(m); renderCategories(m);\n      els.descPredictHint.textContent = 'Desc: \u2013';\n      hideDescSuggestions();\n      els.txDesc.focus();\n    };\n\n    els.addTx.onclick = handleAddTx;\n\n    [els.txDate, els.txDesc, els.txAmt, els.txCat].forEach(el=>{\n      el.addEventListener('keydown', (e)=>{\n        if(e.key === 'Enter'){\n          if(el === els.txDesc && descSuggestions.length){\n            e.preventDefault();\n            return;\n          }\n          handleAddTx();\n        }\n      });\n    });\n\n    els.txSearch.oninput = ()=>renderTransactions(Store.getMonth(currentMonthKey));\n    els.txFilterCat.onchange = ()=>renderTransactions(Store.getMonth(currentMonthKey));\n    els.txDeleteAll.onclick = async ()=>{\n      if(await Dialog.confirm('Delete all transactions for this month?')){\n        const m = Store.getMonth(currentMonthKey);\n        Model.clearTx(m);\n        Store.setMonth(currentMonthKey, m);\n        renderTransactions(m);\n        renderCategories(m);\n      }\n    };\n\n    const txListScrollable = ()=> els.txList.scrollHeight > els.txList.clientHeight + 1;\n    const txListAtBottom = ()=> els.txList.scrollTop + els.txList.clientHeight >= els.txList.scrollHeight - 1;\n    const updateTxJump = ()=>{\n      if(!txListScrollable()){ els.txJump.classList.add('hidden'); return; }\n      els.txJump.classList.remove('hidden');\n      const atBottom = txListAtBottom();\n      els.txJump.innerHTML = atBottom ? ICON_CHEVRONS_UP : ICON_CHEVRONS_DOWN;\n      els.txJump.setAttribute('aria-label', atBottom ? 'Top' : 'Bottom');\n    };\n    els.txJump.onclick = ()=>{\n      if(txListAtBottom()) els.txList.scrollTo({top:0,behavior:'smooth'});\n      else els.txList.scrollTo({top:els.txList.scrollHeight,behavior:'smooth'});\n    };\n    els.txList.addEventListener('scroll', updateTxJump);\n\n    els.addNote.onclick = ()=>{\n      const desc = els.noteDesc.value.trim();\n      const data = els.noteData.value.trim();\n      if(!desc && !data) return;\n      const notes = Store.notes();\n      if(editingNoteId){\n        const n = notes.find(x=>x.id===editingNoteId);\n        if(n){ n.desc = desc; n.data = data; }\n        editingNoteId = null;\n        els.addNote.textContent = 'Add Note';\n      } else {\n        notes.push({id:Date.now(), desc, data, time: Date.now()});\n      }\n      Store.setNotes(notes);\n      els.noteDesc.value='';\n      els.noteData.value='';\n      renderNotes();\n    };\n\n    // Learning panel\n    els.learnAdd.onclick = ()=>{ Predictor.learn(els.learnDesc.value, els.learnCat.value); DescPredictor.learn(els.learnDesc.value); els.learnDesc.value=''; renderLearnList(); };\n\n    function renderLearnList(){\n      const map = Store.mapping();\n      els.learnList.innerHTML = '';\n      for(const [k,v] of Object.entries(map.exact)){\n        const [d,a] = k.split('|');\n        const disp = a ? `${d} (\u00A3${a})` : d;\n        const row = document.createElement('div'); row.className='list-item';\n        row.innerHTML = `<div><strong>${disp}</strong><div><small>${v}</small></div></div>`;\n        els.learnList.appendChild(row);\n      }\n    }\n\n    // Month controls\n    els.newMonth.onclick = ()=>{\n      const mk = els.monthPicker.value || Utils.monthKey();\n      if(Store.getMonth(mk)) { Dialog.alert('Month already exists. Choose a different month.'); return; }\n      const month = Model.template();\n      const months = Store.allMonths();\n      if(months.length){\n        const prev = months[months.length-1];\n        month.categories = Utils.clone(Store.categories(prev));\n      }\n      Store.setMonth(mk, month); loadMonth(mk);\n    };\n    els.deleteNextMonth.onclick = async ()=>{\n      if(els.deleteNextMonth.disabled) return;\n      const nextKey = getNextStoredMonthKey();\n      if(!nextKey) return;\n      const nextLabel = new Date(nextKey+'-01').toLocaleString(undefined,{month:'long',year:'numeric'});\n      const confirmed = await Dialog.confirm(`Delete ${nextLabel}? This will remove all data for that month.`);\n      if(!confirmed) return;\n      Store.deleteMonth(nextKey);\n      const months = Store.allMonths();\n      const target = months.includes(currentMonthKey) ? currentMonthKey : (months.slice(-1)[0] || null);\n      if(target){\n        loadMonth(target);\n      }else{\n        const mkNew = Utils.monthKey(new Date());\n        const month = Model.template();\n        Store.setMonth(mkNew, month);\n        loadMonth(mkNew);\n      }\n    };\n    els.openMonth.onchange = (e)=>{ if(e.target.value) loadMonth(e.target.value); };\n\n    // Export/Import\n    function download(name, data, type='json'){\n      const blob = type==='csv'\n        ? new Blob([data], {type:'text/csv'})\n        : new Blob([JSON.stringify(data,null,2)], {type:'application/json'});\n      const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=name; a.click();\n    }\n\n    function updateExportVis(){\n      const tx = els.exportKind.value==='transactions';\n      els.exportMonthRow.classList.toggle('hidden', !tx);\n      els.exportTypeRow.classList.toggle('hidden', !tx);\n    }\n    els.exportBtn.onclick = ()=>{\n      els.exportKind.value='transactions';\n      els.exportMonth.value=currentMonthKey;\n      els.exportType.value='json';\n      updateExportVis();\n      els.exportDialog.showModal();\n    };\n    els.exportCancel.onclick = ()=>{ els.exportDialog.close(); };\n    els.exportKind.onchange = updateExportVis;\n    els.exportConfirm.onclick = ()=>{\n      const kind = els.exportKind.value;\n      if(kind==='transactions'){\n        const mk = Utils.monthKey(els.exportMonth.value);\n        if(!mk){ Dialog.alert('Select month'); return; }\n        const txs = Store.exportData('transactions', mk);\n        if(els.exportType.value==='csv'){\n          const csv = Utils.toCSV(txs);\n          download(`transactions-${mk}.csv`, csv, 'csv');\n        }else{\n          download(`transactions-${mk}.json`, txs);\n        }\n      }else if(kind==='categories'){\n        const data = Store.exportData('categories', currentMonthKey);\n        download('categories.json', data);\n      }else if(kind==='prediction'){\n        const data = Store.exportData('prediction');\n        download('prediction-map.json', data);\n      }else{\n        const data = Store.exportData('all');\n        download('budget-all.json', data);\n      }\n      els.exportDialog.close();\n    };\n\n    function updateImportVis(){\n      const tx = els.importKind.value==='transactions';\n      els.importMonthRow.classList.toggle('hidden', !tx);\n      els.importTypeRow.classList.toggle('hidden', !tx);\n      const t = els.importType.value;\n      els.importFile.accept = tx && t==='csv'?'.csv':'application/json,.json';\n    }\n    els.importBtn.onclick = ()=>{\n      els.importKind.value='transactions';\n      els.importMonth.value = currentMonthKey;\n      els.importType.value='json';\n      els.importFile.value='';\n      updateImportVis();\n      els.importDialog.showModal();\n    };\n    els.importCancel.onclick = ()=>{ els.importDialog.close(); };\n    els.importKind.onchange = updateImportVis;\n    els.importType.onchange = updateImportVis;\n    els.importConfirm.onclick = ()=>{\n      const kind = els.importKind.value;\n      const file = els.importFile.files[0];\n      if(!file){ Dialog.alert('Select file'); return; }\n      const r = new FileReader();\n      r.onload = ()=>{\n        try{\n          const text = r.result;\n          let targetMonth = currentMonthKey;\n          if(kind==='transactions'){\n            const mk = Utils.monthKey(els.importMonth.value);\n            if(!mk){ Dialog.alert('Select month'); return; }\n            targetMonth = mk;\n            let txs;\n            if(els.importType.value==='json'){\n              const parsed = JSON.parse(text);\n              txs = Array.isArray(parsed) ? parsed : parsed.transactions;\n            }else{\n              const lines = text.trim().split(/\\r?\\n/).filter(l=>l);\n              const headers = lines[0].split(',').map(s=>s.trim());\n              const exp = ['Date','Description','Category','Amount'];\n              const match = exp.every((h,i)=>headers[i] && headers[i].toLowerCase()===h.toLowerCase());\n              if(match){\n                txs = Utils.parseCSV(text);\n              }else{\n                pendingCSV = {text, headers, mk};\n                const opts = ['<option value=\"\"></option>', ...headers.map((h,i)=>`<option value=\"${i}\">${h}</option>`)].join('');\n                els.csvMapDate.innerHTML = opts;\n                els.csvMapDesc.innerHTML = opts;\n                els.csvMapCat.innerHTML = opts;\n                els.csvMapAmt.innerHTML = opts;\n                const guess = (n)=>headers.findIndex(h=>h.toLowerCase().includes(n));\n                els.csvMapDate.value = (guess('date')>=0?guess('date'):0).toString();\n                els.csvMapDesc.value = (guess('desc')>=0?guess('desc'):(guess('description')>=0?guess('description'):1)).toString();\n                els.csvMapCat.value = (guess('cat')>=0?guess('cat'):(guess('category')>=0?guess('category'):2)).toString();\n                els.csvMapAmt.value = (guess('amount')>=0?guess('amount'):3).toString();\n                const headerGuess = headers.some(h=>/[a-zA-Z]/.test(h));\n                els.csvMapHeader.checked = headerGuess;\n                els.csvMapInvert.checked = false;\n                els.importDialog.close();\n                els.csvMapDialog.showModal();\n                return;\n              }\n            }\n            if(!Array.isArray(txs)) throw new Error('bad');\n            let m = Store.getMonth(mk) || Model.emptyMonth();\n            const catSet = new Set(Object.keys(m.categories));\n            for(const t of txs){\n              if(!t.category){\n                t.category = Predictor.predict(t.desc, [...catSet], t.amount) || '';\n              }\n              Model.addTx(m,t);\n              if(t.category) Predictor.learn(t.desc,t.category,t.amount);\n              DescPredictor.learn(t.desc);\n              if(t.category) catSet.add(t.category);\n            }\n            Store.setMonth(mk,m);\n          }else if(kind==='categories'){\n            const parsed = JSON.parse(text);\n            const cats = parsed.categories || parsed;\n            const m = Store.getMonth(targetMonth) || Model.emptyMonth();\n            m.categories = {...m.categories, ...cats};\n            Store.setMonth(targetMonth, m);\n          }else if(kind==='prediction'){\n            const parsed = JSON.parse(text);\n            Store.importData({months:{}, ...parsed});\n          }else{\n            const parsed = JSON.parse(text);\n            Store.importData(parsed);\n          }\n          loadMonth(targetMonth);\n          Dialog.info('Import completed.');\n          els.importDialog.close();\n        }catch{\n          Dialog.alert('Invalid file');\n        }\n      };\n      r.readAsText(file);\n    };\n\n    els.csvMapCancel.onclick = ()=>{ els.csvMapDialog.close(); };\n    els.csvMapConfirm.onclick = ()=>{\n      if(!pendingCSV) return;\n      const map = {\n        date: els.csvMapDate.value,\n        desc: els.csvMapDesc.value,\n        category: els.csvMapCat.value,\n        amount: els.csvMapAmt.value\n      };\n      const hasHeader = els.csvMapHeader.checked;\n      const invert = els.csvMapInvert.checked;\n      try{\n        const txs = Utils.parseCSV(pendingCSV.text, map, hasHeader, invert);\n        let m = Store.getMonth(pendingCSV.mk) || Model.emptyMonth();\n        const catSet = new Set(Object.keys(m.categories));\n        for(const t of txs){\n          if(!t.category){\n            t.category = Predictor.predict(t.desc, [...catSet], t.amount) || '';\n          }\n          Model.addTx(m,t);\n          if(t.category) Predictor.learn(t.desc,t.category,t.amount);\n          DescPredictor.learn(t.desc);\n          if(t.category) catSet.add(t.category);\n        }\n        Store.setMonth(pendingCSV.mk,m);\n        loadMonth(pendingCSV.mk);\n        Dialog.info('Import completed.');\n        pendingCSV = null;\n        els.csvMapDialog.close();\n      }catch{\n        Dialog.alert('Import failed. Adjust field mapping.');\n      }\n    };\n\n    const runAnalysis = ()=>{\n      const opt = els.analysisSelect.value;\n      els.analysisCharts.classList.remove('charts');\n      els.analysisTotal.textContent = '';\n      if(opt === 'budget-spread'){\n        els.analysisMonthRow.classList.remove('hidden');\n        els.analysisYearRow.classList.add('hidden');\n        els.analysisGroupRow.classList.add('hidden');\n        els.analysisCategoryRow.classList.add('hidden');\n        const months = Store.allMonths();\n        const opts = months.map(m=>`<option value=\"${m}\">${new Date(m+'-01').toLocaleString(undefined,{month:'short',year:'numeric'})}</option>`).join('');\n        const prev = els.analysisMonth.value;\n        els.analysisMonth.innerHTML = opts;\n        els.analysisMonth.value = months.includes(prev) ? prev : currentMonthKey;\n        const prevType = els.analysisChartType.value;\n        els.analysisChartType.innerHTML = `<option value=\"pie\">Pie Chart</option><option value=\"bar\">Bar Chart</option>`;\n        els.analysisChartType.value = ['pie','bar'].includes(prevType) ? prevType : 'bar';\n      }else if(opt === 'money-in'){\n        els.analysisMonthRow.classList.add('hidden');\n        els.analysisYearRow.classList.remove('hidden');\n        els.analysisGroupRow.classList.remove('hidden');\n        els.analysisCategoryRow.classList.remove('hidden');\n        const monthsAll = Store.allMonths();\n        const years = [...new Set(monthsAll.map(m=>m.slice(0,4)))].sort();\n        const prevYear = els.analysisYear.value;\n        const yearOpts = ['<option value=\"\">All</option>', ...years.map(y=>`<option value=\"${y}\">${y}</option>`)];\n        els.analysisYear.innerHTML = yearOpts.join('');\n        els.analysisYear.value = years.includes(prevYear) ? prevYear : '';\n        const groupOpts = ['<option value=\"\">All</option>'];\n        els.analysisGroup.innerHTML = groupOpts.join('');\n        els.analysisGroup.value = '';\n        const prevCat = els.analysisCategory.value;\n        const allMonthsData = Store.exportData().months || {};\n        const catSet = new Set();\n        for(const m of Object.values(allMonthsData)){\n          (m.incomes||[]).forEach(i=>catSet.add(i.name));\n        }\n        const catList = [...catSet].sort();\n        const catOpts = ['<option value=\"\">All</option>', ...catList.map(c=>`<option value=\"${c}\">${c}</option>`)];\n        els.analysisCategory.innerHTML = catOpts.join('');\n        els.analysisCategory.value = catList.includes(prevCat) ? prevCat : '';\n        const prevType = els.analysisChartType.value;\n        els.analysisChartType.innerHTML = `<option value=\"line\">Line Chart</option><option value=\"bar\">Vertical Bar Chart</option>`;\n        els.analysisChartType.value = ['line','bar'].includes(prevType) ? prevType : 'line';\n      }else if(opt === 'monthly-spend'){\n        els.analysisMonthRow.classList.add('hidden');\n        els.analysisYearRow.classList.remove('hidden');\n        els.analysisGroupRow.classList.remove('hidden');\n        els.analysisCategoryRow.classList.remove('hidden');\n        const monthsAll = Store.allMonths();\n        const years = [...new Set(monthsAll.map(m=>m.slice(0,4)))].sort();\n        const prevYear = els.analysisYear.value;\n        const yearOpts = ['<option value=\"\">All</option>', ...years.map(y=>`<option value=\"${y}\">${y}</option>`)];\n        els.analysisYear.innerHTML = yearOpts.join('');\n        els.analysisYear.value = years.includes(prevYear) ? prevYear : '';\n        const catsCur = Store.categories(currentMonthKey);\n        const groups = [...new Set(Object.values(catsCur).map(x=>x.group||'Other'))].sort();\n        const prevGroup = els.analysisGroup.value;\n        const groupOpts = ['<option value=\"\">All</option>', ...groups.map(g=>`<option value=\"${g}\">${g}</option>`)];\n        els.analysisGroup.innerHTML = groupOpts.join('');\n        els.analysisGroup.value = groups.includes(prevGroup) ? prevGroup : '';\n        const prevCat = els.analysisCategory.value;\n        const groupSel = els.analysisGroup.value;\n        const allCats = Object.keys(catsCur).sort();\n        const catList = allCats.filter(c=>!groupSel || (catsCur[c].group||'Other')===groupSel);\n        const catOpts = ['<option value=\"\">All</option>', ...catList.map(c=>`<option value=\"${c}\">${c}</option>`)];\n        els.analysisCategory.innerHTML = catOpts.join('');\n        els.analysisCategory.value = catList.includes(prevCat) ? prevCat : '';\n        const prevType = els.analysisChartType.value;\n        els.analysisChartType.innerHTML = `<option value=\"line\">Line Chart</option><option value=\"bar\">Vertical Bar Chart</option>`;\n        els.analysisChartType.value = ['line','bar'].includes(prevType) ? prevType : 'line';\n      }\n      const style = els.analysisChartType.value;\n      if(analysisChart){ analysisChart.destroy(); analysisChart = null; }\n      if(analysisChartActual){ analysisChartActual.destroy(); analysisChartActual = null; }\n      els.analysisPlannedTitle.classList.add('hidden');\n      els.analysisActualTitle.classList.add('hidden');\n      els.analysisChartActual.classList.add('hidden');\n      if(opt === 'monthly-spend'){\n        const yearSel = els.analysisYear.value;\n        const months = Store.allMonths().filter(m=>!yearSel || m.startsWith(yearSel));\n        const labels = months;\n        const group = els.analysisGroup.value;\n        const category = els.analysisCategory.value;\n        const data = months.map(mk=>{\n          const m = Store.getMonth(mk) || {transactions:[], categories:{}};\n          const cats = m.categories || {};\n          const txs = m.transactions||[];\n          return Utils.sum(txs.filter(t=>{\n            if(category) return t.category === category;\n            if(!group) return true;\n            const meta = cats[t.category] || {};\n            const g = meta.group || 'Other';\n            return g === group;\n          }), t=>t.amount);\n        });\n        const total = Utils.sum(data);\n        els.analysisTotal.textContent = Utils.fmt(total);\n        const label = category ? `${category} Spend` : group ? `${group} Spend` : 'Total Spend';\n        analysisChart = new Chart(els.analysisChart.getContext('2d'), {\n          type: style === 'bar' ? 'bar' : 'line',\n          data: {\n            labels,\n            datasets: [{\n              label,\n              data,\n              borderColor: '#0ea5e9',\n              backgroundColor: '#0ea5e9',\n              tension: 0.2,\n              fill: false\n            }]\n          },\n          options: { scales: { y: { beginAtZero: true } } }\n        });\n      }else if(opt === 'money-in'){\n        const yearSel = els.analysisYear.value;\n        const months = Store.allMonths().filter(m=>!yearSel || m.startsWith(yearSel));\n        const labels = months;\n        const category = els.analysisCategory.value;\n        const data = months.map(mk=>{\n          const m = Store.getMonth(mk) || {incomes:[]};\n          const incomes = m.incomes || [];\n          return Utils.sum(incomes.filter(i=>!category || i.name===category), i=>i.amount);\n        });\n        const total = Utils.sum(data);\n        els.analysisTotal.textContent = Utils.fmt(total);\n        const label = category ? `${category} Income` : 'Total Income';\n        analysisChart = new Chart(els.analysisChart.getContext('2d'), {\n          type: style === 'bar' ? 'bar' : 'line',\n          data: {\n            labels,\n            datasets: [{\n              label,\n              data,\n              borderColor: '#10b981',\n              backgroundColor: '#10b981',\n              tension: 0.2,\n              fill: false\n            }]\n          },\n          options: { scales: { y: { beginAtZero: true } } }\n        });\n      }else if(opt === 'budget-spread'){\n        const mk = els.analysisMonth.value || currentMonthKey;\n        // Fetch the selected month's data rather than the currently open month\n        const monthForChart = Utils.clone(Store.getMonth(mk) || Model.emptyMonth());\n        const totals = Model.totals(monthForChart);\n        const labels = Object.keys(totals.groups).sort();\n        const planned = labels.map(l=>totals.groups[l]?.budget || 0);\n        const actual = labels.map(l=>totals.groups[l]?.actual || 0);\n        const plannedTot = Utils.sum(planned);\n        const actualTot = Utils.sum(actual);\n        els.analysisTotal.textContent = `Planned ${Utils.fmt(plannedTot)} / Actual ${Utils.fmt(actualTot)}`;\n        const plannedPct = planned.map(v=> plannedTot ? (v/plannedTot*100) : 0);\n        const actualPct = actual.map(v=> actualTot ? (v/actualTot*100) : 0);\n        const palette = ['#0ea5e9','#f43f5e','#10b981','#f59e0b','#8b5cf6','#ec4899','#14b8a6','#f97316','#22c55e','#d946ef'];\n        const colors = labels.map((_,i)=>palette[i%palette.length]);\n        const percentPlugin = {\n          id:'pct',\n          afterDatasetsDraw(chart){\n            const {ctx} = chart;\n            const dataset = chart.data.datasets[0];\n            chart.getDatasetMeta(0).data.forEach((arc,i)=>{\n              const val = dataset.data[i]||0;\n              const pos = arc.tooltipPosition();\n              ctx.save();\n              ctx.fillStyle='#fff';\n              ctx.font='14px system-ui';\n              ctx.textAlign='center';\n              ctx.textBaseline='middle';\n              ctx.fillText(`${val.toFixed(1)}%`, pos.x, pos.y);\n              ctx.restore();\n            });\n          }\n        };\n        const pieOpts = {\n          plugins:{\n            tooltip:{callbacks:{label:c=>`${c.label}: ${c.parsed.toFixed(1)}%`}}\n          }\n        };\n        const barOpts = {\n          plugins:{tooltip:{callbacks:{label:c=>`${c.dataset.label}: ${Utils.fmt(c.parsed.y)}`}}},\n          scales:{y:{beginAtZero:true,ticks:{callback:v=>Utils.fmt(v)}}}\n        };\n        if(style === 'pie'){\n          els.analysisCharts.classList.add('charts');\n          els.analysisPlannedTitle.classList.remove('hidden');\n          els.analysisActualTitle.classList.remove('hidden');\n          els.analysisChartActual.classList.remove('hidden');\n          analysisChart = new Chart(els.analysisChart.getContext('2d'), {\n            type:'pie',\n            data:{labels,datasets:[{label:'Planned %', data: plannedPct, backgroundColor: colors}]},\n            options: pieOpts,\n            plugins:[percentPlugin]\n          });\n          analysisChartActual = new Chart(els.analysisChartActual.getContext('2d'), {\n            type:'pie',\n            data:{labels,datasets:[{label:'Actual %', data: actualPct, backgroundColor: colors}]},\n            options: pieOpts,\n            plugins:[percentPlugin]\n          });\n        }else{\n          analysisChart = new Chart(els.analysisChart.getContext('2d'), {\n            type:'bar',\n            data:{\n              labels,\n              datasets:[\n                {label:'Planned', data: planned, backgroundColor:'#0ea5e9'},\n                {label:'Actual', data: actual, backgroundColor:'#f43f5e'}\n              ]\n            },\n            options: barOpts\n          });\n        }\n      }\n    };\n\n    // Tabs\n    function selectTab(key){\n      const map = {\n        budget:[els.tabBudget,els.panelBudget],\n        tx:[els.tabTx,els.panelTx],\n        analysis:[els.tabAnalysis,els.panelAnalysis],\n        learn:[els.tabLearning,els.panelLearning]\n      };\n      for(const [k,[btn,pan]] of Object.entries(map)){ const on = (k===key); btn.setAttribute('aria-selected',on); pan.classList.toggle('hidden',!on); }\n      if(key==='tx') updateTxJump();\n    }\n    els.tabBudget.onclick = ()=>selectTab('budget');\n    els.tabTx.onclick = ()=>selectTab('tx');\n    els.tabAnalysis.onclick = ()=>{ selectTab('analysis'); runAnalysis(); };\n    els.tabCalendar.onclick = ()=>{ calendarDate = new Date(); renderCalendar(); els.calendarDialog.showModal(); };\n    els.tabNotes.onclick = ()=>{ editingNoteId=null; els.addNote.textContent='Add Note'; els.noteDesc.value=''; els.noteData.value=''; renderNotes(); els.notesDialog.showModal(); };\n    els.tabLearning.onclick = ()=>{ selectTab('learn'); renderLearnList(); };\n    els.notesClose.onclick = ()=>els.notesDialog.close();\n    els.calendarClose.onclick = ()=>els.calendarDialog.close();\n    els.calendarPrev.onclick = ()=>{ calendarDate.setMonth(calendarDate.getMonth()-1); renderCalendar(); };\n    els.calendarNext.onclick = ()=>{ calendarDate.setMonth(calendarDate.getMonth()+1); renderCalendar(); };\n    els.analysisSelect.onchange = runAnalysis;\n    els.analysisChartType.onchange = runAnalysis;\n    els.analysisMonth.onchange = runAnalysis;\n    els.analysisYear.onchange = runAnalysis;\n    els.analysisGroup.onchange = runAnalysis;\n    els.analysisCategory.onchange = runAnalysis;\n\n    function renderCalendar(){\n      const year = calendarDate.getFullYear();\n      const month = calendarDate.getMonth();\n      const mk = Utils.monthKey(calendarDate);\n      const m = Store.getMonth(mk) || {transactions:[]};\n      const totals = {};\n      for(const tx of m.transactions){\n        const d = Number(tx.date.slice(8,10));\n        totals[d] = (totals[d]||0) + Math.abs(tx.amount);\n      }\n      const first = new Date(year, month, 1);\n      const start = (first.getDay() + 6) % 7;\n      const days = new Date(year, month + 1, 0).getDate();\n      const names = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];\n      const monthNames = ['January','February','March','April','May','June','July','August','September','October','November','December'];\n      els.calendarMonth.textContent = `${monthNames[month]} ${year}`;\n      const today = new Date();\n      let html = '<table class=\"calendar-table\"><thead><tr>';\n      for(const n of names) html += `<th>${n}</th>`;\n      html += '</tr></thead><tbody><tr>';\n      let day = 1;\n      for(let i=0;i<start;i++) html += '<td></td>';\n      for(let i=start;i<7;i++) html += cell(day++);\n      html += '</tr>';\n      while(day <= days){\n        html += '<tr>';\n        for(let i=0;i<7;i++) html += day<=days?cell(day++):'<td></td>';\n        html += '</tr>';\n      }\n      html += '</tbody></table>';\n      els.calendarContainer.innerHTML = html;\n\n      function cell(d){\n        const isToday = d===today.getDate() && month===today.getMonth() && year===today.getFullYear();\n        const total = totals[d];\n        const amt = total?`<span class=\"day-total\">${Utils.fmt(total)}</span>`:'';\n        return `<td${isToday?' class=\"today\"':''}>${d}${amt}</td>`;\n      }\n    }\n\n    // Initial load\n    loadMonth(currentMonthKey);\n  })();\n"],
  "mappings": "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",
  "names": ["arr", "monthKey", "monthKey", "sum", "state", "_a", "_b"]
}
